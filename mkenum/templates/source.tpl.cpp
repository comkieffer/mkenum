/*
 *  WARNING: This file is generated by 'enum2str'. Any changes made here will 
 *  be destroyed next time the tool is run. 
 *
 *  @date: {{ date }}
 */

#include <stdexcept>

{% if config["outputs"]["source"]["system_includes"] %}
    {% for include in config["outputs"]["source"]["system_includes"] %}
#include <{{ include }}>
    {% endfor %}
{% endif %}


{% if config["outputs"]["source"]["local_includes"] %}
    {% for include in config["outputs"]["source"]["local_includes"] %}
#include "{{ include }}"
    {% endfor %}
{% endif %}

{% for enum in config["enumerations"] %}

std::string to_string({{ enum["full_namespace"] }}::{{ enum.name }} value) {
    switch(value) {
    {% for value in enum["values"] %}
    case {{ enum["full_namespace"] }}::{{ enum["name"] }}::{{ value["identifier"] }}: 
        return "{{ value["identifier"] }}";
    {% endfor %}

    default: return "Unknown Value";
    }
}

{% for namespace in enum["namespace"] %}
namespace {{ namespace }} {
{% endfor %}

    {{ enum["name"] }} to_{{ enum["name"] }}(const std::string & value) {
        {% for value in enum["values"] %}
        {% if loop.index == 1 %}
        if (value == "{{ value["identifier"] }}") 
            return {{ enum.name }}::{{ value["identifier"] }};
        {% else %}
        else if (value == "{{ value["identifier"] }}") 
            return {{ enum["name"] }}::{{ value["identifier"] }};
        {% endif %}
                {% endfor %}

        throw std::out_of_range(value);
    }

    {% for mapping in enum["mappings"] %}
    {{ mapping["return_type"] }} {{ mapping["name"] }}({{ enum["name"] }} value) {
        {% for value in enum["values"] %}
        {% if loop.index == 1 %}
        if (value == {{ enum["name"] }}::{{ value[ "identifier" ] }}) 
            return {{ value[ mapping["to"] ] }};
        {% else %}
        else if (value == {{ enum["name"] }}::{{ value[ "identifier" ] }}) 
            return {{ value[ mapping["to"] ] }};
        {% endif %}
        {% endfor %}
    
        throw std::out_of_range(to_string(value));
    }

    {% endfor %}

{% for namespace in enum.namespace %}
} // end namespace {{ namespace }}
{% endfor %}
{% endfor %} {# for enum in enums #}
