/*
 *  WARNING: This file is generated by 'enum2str'. Any changes made here will 
 *  be destroyed next time the tool is run. 
 *
 *  @date: {{ date }}
 */

#pragma once

#include <string>
#include <array>

{% if config["outputs"]["header"]["system_includes"] %}
    {% for include in config["outputs"]["header"]["system_includes"] %}
#include <{{ include }}>
    {% endfor %}
{% endif %}

{% if config["outputs"]["header"]["local_includes"] %}
    {% for include in config["outputs"]["header"]["local_includes"] %}
#include "{{ include }}"
    {% endfor %}
{% endif %}

{% for enum in config.enumerations %}
    {% for namespace in enum.namespace %}
namespace {{ namespace }} {
    {% endfor %}

    {% if enum.doc_comment|length > 1 %}
    /**
        {% for line in enum["doc_comment"] %}
     * {{ line }}
        {% endfor %}
     */
    {% endif %}
    enum class {{ enum.name }} {
    {% for value in enum["values"] %}
    {% if value["value"] %}
        {{ value["identifier"] }} = {{ value["value"] }},
    {% else %}
        {{ value["identifier"] }},
    {% endif %}
    {% endfor %}
    };
    
    
    /**
     * Convert a std::string to a {{ enum.name }} value.
     *
     * @param value The stringified version of an {{ enum.name }} field to convert back to a {{ enum.name }}.
     * @return The {{ enum.name }} value.
     */
    {{ enum.full_namespace }}::{{enum.name}} to_{{ enum.name }}(const std::string & value);

    namespace {{ enum.name }}_ {

        constexpr std::array<{{ enum["name"] }}, {{ enum["values"]|length }}> Values{
        {% for value in enum["values"] %}
            {{ enum["name"] }}::{{ value["identifier"] }},
        {% endfor %}
        };

        {% for mapping in enum["mappings"] %}
        {{ mapping["return_type"] }} {{ mapping["name"] }}({{ enum["name"] }} value);
        {% endfor %}

    }
    
{% for namespace in enum.namespace|reverse %}
} // end namespace {{ namespace }}
{% endfor %}

/** 
 * Convert a {{ enum.name }} to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with #to_{{ enum.name }}
 * 
 * @param value The {{ enum.name }} to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const {{ enum.full_namespace }}::{{ enum.name }} value);

std::ostream& operator<<(std::ostream& os, const {{ enum.full_namespace }}::{{ enum.name }} value);

{% else %}
// No enums found in config
{% endfor %} {# for enum in enums #}
